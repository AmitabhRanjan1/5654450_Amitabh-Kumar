#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX 1000  // maximum string length

// Simple stack
typedef struct {
    char arr[MAX];
    int top;
} Stack;

void init(Stack *s) { s->top = -1; }
int empty(Stack *s) { return s->top == -1; }
void push(Stack *s, char c) { s->arr[++s->top] = c; }
char pop(Stack *s) { return s->arr[s->top--]; }
char peek(Stack *s) { return s->arr[s->top]; }

int isBalanced(char *s) {
    Stack st;
    init(&st);

    for (int i = 0; s[i]; i++) {
        char c = s[i];
        if (c == '(' || c == '{' || c == '[') {
            push(&st, c);
        } else {
            if (empty(&st)) return 0; // no matching opening

            char top = pop(&st);
            if ((c == ')' && top != '(') ||
                (c == '}' && top != '{') ||
                (c == ']' && top != '[')) {
                return 0; // mismatch
            }
        }
    }
    return empty(&st); // must be empty if balanced
}

int main() {
    int t;
    scanf("%d", &t);
    char str[MAX];

    while (t--) {
        scanf("%s", str);
        if (isBalanced(str)) {
            printf("YES\n");
        } else {
            printf("NO\n");
        }
    }
    return 0;
}
