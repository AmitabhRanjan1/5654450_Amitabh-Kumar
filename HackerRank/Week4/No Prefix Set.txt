#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define ALPHABET 26
#define MAXLEN 60

typedef struct TrieNode {
    struct TrieNode *children[ALPHABET];
    int isEnd;
} TrieNode;

TrieNode* newNode() {
    TrieNode *node = (TrieNode*)malloc(sizeof(TrieNode));
    for (int i = 0; i < ALPHABET; i++) {
        node->children[i] = NULL;
    }
    node->isEnd = 0;
    return node;
}

int insertWord(TrieNode *root, char *word) {
    TrieNode *curr = root;
    for (int i = 0; word[i] != '\0'; i++) {
        int idx = word[i] - 'a';
        if (curr->children[idx] == NULL) {
            curr->children[idx] = newNode();
        }
        curr = curr->children[idx];

        /* Case 1: existing word is prefix of new word */
        if (curr->isEnd) {
            return 0;
        }
    }

    /* Case 2: new word is prefix of existing word */
    for (int i = 0; i < ALPHABET; i++) {
        if (curr->children[i] != NULL) {
            return 0;
        }
    }

    curr->isEnd = 1;
    return 1;
}

int main() {
    int n;
    scanf("%d", &n);

    TrieNode *root = newNode();
    char word[MAXLEN + 1];

    for (int i = 0; i < n; i++) {
        scanf("%s", word);
        if (!insertWord(root, word)) {
            printf("BAD SET\n%s\n", word);
            return 0;
        }
    }

    printf("GOOD SET\n");
    return 0;
}
