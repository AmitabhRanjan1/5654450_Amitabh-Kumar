#include <stdio.h>
#include <stdlib.h>

#define MAXN 100000

int visited[MAXN+1];
int *adj[MAXN+1];
int adjSize[MAXN+1];

/* DFS to count size of connected component */
int dfs(int u) {
    visited[u] = 1;
    int count = 1;
    for (int i = 0; i < adjSize[u]; i++) {
        int v = adj[u][i];
        if (!visited[v]) {
            count += dfs(v);
        }
    }
    return count;
}

int main() {
    int q;
    scanf("%d", &q);
    while (q--) {
        int n, m;
        long c_lib, c_road;
        scanf("%d %d %ld %ld", &n, &m, &c_lib, &c_road);

        /* Reset adjacency list */
        for (int i = 1; i <= n; i++) {
            visited[i] = 0;
            adjSize[i] = 0;
            free(adj[i]);
            adj[i] = NULL;
        }

        /* Build graph */
        for (int i = 0; i < m; i++) {
            int u, v;
            scanf("%d %d", &u, &v);

            adj[u] = (int*)realloc(adj[u], (adjSize[u] + 1) * sizeof(int));
            adj[v] = (int*)realloc(adj[v], (adjSize[v] + 1) * sizeof(int));
            adj[u][adjSize[u]++] = v;
            adj[v][adjSize[v]++] = u;
        }

        long long cost = 0;

        if (c_lib <= c_road) {
            /* Cheaper to build library everywhere */
            cost = (long long)c_lib * n;
        } else {
            for (int i = 1; i <= n; i++) {
                if (!visited[i]) {
                    int compSize = dfs(i);
                    /* 1 library + (compSize-1) roads */
                    cost += c_lib + (long long)(compSize - 1) * c_road;
                }
            }
        }

        printf("%lld\n", cost);
    }
    return 0;
}
